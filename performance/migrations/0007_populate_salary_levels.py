# Generated by Django 5.0.2 on 2025-02-22 20:34

from django.db import migrations

def populate_salary_levels(apps, schema_editor):
    SalaryLevel = apps.get_model('performance', 'SalaryLevel')
    
    salary_levels_data = [
        {
            'level': '1-2',
            'typical_titles': 'Administrative Clerk, Messenger, Cleaner, General Worker',
            'notes': 'Entry-level positions with minimal qualifications required.'
        },
        {
            'level': '3-5',
            'typical_titles': 'Administrative Assistant, Secretary, Data Capturer, Artisan Assistant, Driver',
            'notes': 'Supervisory or technical support roles requiring basic qualifications or vocational training.'
        },
        {
            'level': '6-8',
            'typical_titles': 'Senior Administrative Officer, Supervisor, Foreman, Junior Manager, Technician',
            'notes': 'Lower management or specialized technical roles requiring diplomas or equivalent experience.'
        },
        {
            'level': '9-10',
            'typical_titles': 'Assistant Director, Middle Manager, Specialist (Junior), Senior Technician',
            'notes': 'Middle management or junior specialist roles. Often requires a degree + experience. Example: Assistant Director (HR), Junior Legal Specialist.'
        },
        {
            'level': '11-12',
            'typical_titles': 'Deputy Director, Senior Specialist, Senior Advisor, Program Manager',
            'notes': 'Senior management or mid-career specialists. Example: Deputy Director (Finance), Senior Engineer (OSD).'
        },
        {
            'level': '13',
            'typical_titles': 'Director, Chief Specialist',
            'notes': 'Head of a directorate or division. Example: Director: Communications, Chief Legal Advisor.'
        },
        {
            'level': '14',
            'typical_titles': 'Chief Director, Executive Specialist',
            'notes': 'Oversees multiple directorates or complex functions. Example: Chief Director: Policy Development.'
        },
        {
            'level': '15',
            'typical_titles': 'Deputy Director-General (DDG)',
            'notes': 'Second-highest rank in a national/provincial department. Reports to the Director-General.'
        },
        {
            'level': '16',
            'typical_titles': 'Director-General (DG)',
            'notes': 'Head of a national/provincial department. Accountable to the Minister.'
        },
    ]
    
    for level_data in salary_levels_data:
        SalaryLevel.objects.create(**level_data)

def reverse_salary_levels(apps, schema_editor):
    SalaryLevel = apps.get_model('performance', 'SalaryLevel')
    SalaryLevel.objects.all().delete()

class Migration(migrations.Migration):

    dependencies = [
        ('performance', '0006_salarylevel_alter_genericassessmentfactor_factor_and_more'),
    ]

    operations = [
        migrations.RunPython(populate_salary_levels, reverse_salary_levels),
    ]
