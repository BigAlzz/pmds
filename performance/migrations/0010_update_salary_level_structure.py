# Generated by Django 5.0.2 on 2025-02-22 22:45

from django.db import migrations, models

def update_salary_levels(apps, schema_editor):
    SalaryLevel = apps.get_model('performance', 'SalaryLevel')
    
    # First, delete existing salary levels
    SalaryLevel.objects.all().delete()
    
    # Define new salary levels with individual levels
    salary_levels_data = [
        {
            'level': '1',
            'typical_titles': 'Administrative Clerk, Messenger, Cleaner',
            'notes': 'Entry-level position with minimal qualifications required.',
            'numeric_level': 1
        },
        {
            'level': '2',
            'typical_titles': 'General Worker, Junior Clerk',
            'notes': 'Entry-level position with some experience.',
            'numeric_level': 2
        },
        {
            'level': '3',
            'typical_titles': 'Administrative Assistant, Secretary',
            'notes': 'Basic administrative role requiring some qualifications.',
            'numeric_level': 3
        },
        {
            'level': '4',
            'typical_titles': 'Data Capturer, Artisan Assistant',
            'notes': 'Technical support role requiring vocational training.',
            'numeric_level': 4
        },
        {
            'level': '5',
            'typical_titles': 'Senior Administrative Assistant, Driver',
            'notes': 'Senior support role with specialized skills.',
            'numeric_level': 5
        },
        {
            'level': '6',
            'typical_titles': 'Administrative Officer, Junior Supervisor',
            'notes': 'Junior supervisory role requiring diploma.',
            'numeric_level': 6
        },
        {
            'level': '7',
            'typical_titles': 'Senior Administrative Officer, Supervisor',
            'notes': 'Supervisory role with significant experience.',
            'numeric_level': 7
        },
        {
            'level': '8',
            'typical_titles': 'Foreman, Junior Manager, Technician',
            'notes': 'Lower management or specialized technical role.',
            'numeric_level': 8
        },
        {
            'level': '9',
            'typical_titles': 'Assistant Director (Junior), Junior Specialist',
            'notes': 'Junior management requiring degree.',
            'numeric_level': 9
        },
        {
            'level': '10',
            'typical_titles': 'Assistant Director (Senior), Senior Technician',
            'notes': 'Middle management requiring degree + experience.',
            'numeric_level': 10
        },
        {
            'level': '11',
            'typical_titles': 'Deputy Director (Junior), Specialist',
            'notes': 'Senior management or specialist role.',
            'numeric_level': 11
        },
        {
            'level': '12',
            'typical_titles': 'Deputy Director (Senior), Senior Specialist',
            'notes': 'Senior management with extensive experience.',
            'numeric_level': 12
        },
        {
            'level': '13',
            'typical_titles': 'Director, Chief Specialist',
            'notes': 'Head of a directorate or division.',
            'numeric_level': 13
        },
        {
            'level': '14',
            'typical_titles': 'Chief Director, Executive Specialist',
            'notes': 'Oversees multiple directorates or complex functions.',
            'numeric_level': 14
        },
        {
            'level': '15',
            'typical_titles': 'Deputy Director-General (DDG)',
            'notes': 'Second-highest rank in department.',
            'numeric_level': 15
        },
        {
            'level': '16',
            'typical_titles': 'Director-General (DG)',
            'notes': 'Head of department, reports to Minister.',
            'numeric_level': 16
        },
    ]
    
    for level_data in salary_levels_data:
        SalaryLevel.objects.create(**level_data)

def reverse_migration(apps, schema_editor):
    SalaryLevel = apps.get_model('performance', 'SalaryLevel')
    SalaryLevel.objects.all().delete()

class Migration(migrations.Migration):

    dependencies = [
        ('performance', '0009_update_salary_level_numbers'),
    ]

    operations = [
        migrations.AlterField(
            model_name='salarylevel',
            name='level',
            field=models.CharField(choices=[
                ('1', 'Level 1'), ('2', 'Level 2'), ('3', 'Level 3'),
                ('4', 'Level 4'), ('5', 'Level 5'), ('6', 'Level 6'),
                ('7', 'Level 7'), ('8', 'Level 8'), ('9', 'Level 9'),
                ('10', 'Level 10'), ('11', 'Level 11'), ('12', 'Level 12'),
                ('13', 'Level 13'), ('14', 'Level 14'), ('15', 'Level 15'),
                ('16', 'Level 16')
            ], max_length=5, unique=True),
        ),
        migrations.RunPython(update_salary_levels, reverse_migration),
    ]
